services:
  frontend:
    build: ./frontend
    ports:
      - "${FRONTEND_PORT}:5000"
    links:
      - backend
    volumes:
      - ./frontend:/app
    environment:
      FLASK_APP: ${FLASK_APP}
      FLASK_ENV: ${FLASK_ENV}
      FLASK_DEBUG: ${FLASK_DEBUG}
      DATABASE_URL: ${PGSQL_DB_URI}
      FLASK_SECRET_KEY: ${JWT_SECRET}
    command: flask run --host=${FRONTEND_HOST} --reload --extra-files=/templates
    depends_on:
      - backend

  backend:
    build: ./backend
    ports:
      - "${BACKEND_PORT}:8000"
    links:
      - pgbouncer
    environment:
      JWT_SECRET: ${JWT_SECRET}
    command: uvicorn app:app --host ${BACKEND_HOST} --port ${BACKEND_PORT}
    depends_on:
      - pgbouncer

  db:
    image: sirsplat/dvdrental:latest
    container_name: dvdrental
    build: ./db
    volumes:
      - db-data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${PGSQL_DB}
      POSTGRES_USER: ${PGSQL_USER}
      POSTGRES_PASSWORD: ${PGSQL_PASSWORD}
    ports:
      - "${DB_PORT}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    links:
      - db
    environment:
      - PGBCR_DB_NAME=${DB_NAME}
      - PGBCR_DB_USER=${POSTGREST_DB_USER}
      - PGBCR_DB_PASSWORD=${POSTGREST_DB_PASSWORD}
    volumes:
      - ./pgbouncer/pgbouncer.ini:/etc/pgbouncer/pgbouncer.ini
      - ./pgbouncer/userlist.txt:/etc/pgbouncer/userlist.txt
    ports:
      - "${PGBOUNCER_PORT}:6432"
    depends_on:
      - db

  postgrest:
    image: postgrest/postgrest
    environment:
      PGRST_DB_URI: ${PGBOUNCER_DB_URI}
      PGRST_DB_SCHEMA: ${POSTGREST_DB_SCHEMA}
      PGRST_DB_ANON_ROLE: ${POSTGREST_DB_ANON_ROLE}
      PGRST_JWT_SECRET: ${JWT_SECRET}
      PGRST_DB_POOL: ${POSTGREST_DB_POOL}
      PGRST_DB_PREPARED_STATEMENTS: ${POSTGREST_DB_PREPARED_STATEMENTS}
    ports:
      - "${POSTGREST_PORT}:3000"
    links:
      - db:db
    depends_on:
      - pgbouncer
      - db

  sqitch:
    image: sqitch/sqitch:latest
    container_name: sqitch
    links:
      - db
    environment:
      - PGUSER=${SQITCH_USER}
      - PGPASSWORD=${SQITCH_PASSWORD}
      - PGHOST=${SQITCH_HOST}
      - PGDATABASE=${SQITCH_DB}
    user: sqitch
    volumes:
      - ./sqitch/.sqitch/sqitch.conf:/home/.sqitch/sqitch.conf
      - ./.pgpass:/home/.pgpass:ro
      - ./sqitch/sqitch.sh:/home/sqitch.sh
      - ./sqitch/migrations/:/mnt/migrations/
      - ./sqitch/migrations/sqitch.conf:/mnt/migrations/sqitch.conf
    working_dir: /mnt/migrations
    entrypoint: /bin/bash
    command: -c "tail -f /dev/null"
    depends_on:
      - db

  pg_prove:
    image: itheory/pg_prove:latest
    links:
      - db
    container_name: pgprove
    volumes:
      - ./.pgpass:/root/.pgpass:ro
      - ./pg_prove/pg_prove.sh:/root/pg_prove.sh
      - ./pg_prove/pgtapme_generated_files:/mnt/tests/
    working_dir: /mnt/tests
    entrypoint: /bin/sh
    command: -c "tail -f /dev/null"
    depends_on:
      - db

volumes:
  db-data:
